#include <iostream>

constexpr int BLACK{0}, WHITE{1};
#define disableBit(source, position) \
    asm volatile("btr %1, %0;"       \
                 : "+r"(source)      \
                 : "r"(position))

#define countTrailingZero(source, result) \
    asm volatile("tzcnt %1, %0;"          \
                 : "=r"(result)           \
                 : "r"(source))

#define populationCount(source, result) \
    asm volatile("popcnt %1, %0;"       \
                 : "=r"(result)         \
                 : "r"(source))

constexpr unsigned long long MASK{0b00000000'01111111'01111111'01111111'01111111'01111111'01111111'01111111};
constexpr unsigned long long IN_RADIUS_1[64]{
    0b00000000'00000000'00000000'00000000'00000000'00000000'00000011'00000010,
    0b00000000'00000000'00000000'00000000'00000000'00000000'00000111'00000101,
    0b00000000'00000000'00000000'00000000'00000000'00000000'00001110'00001010,
    0b00000000'00000000'00000000'00000000'00000000'00000000'00011100'00010100,
    0b00000000'00000000'00000000'00000000'00000000'00000000'00111000'00101000,
    0b00000000'00000000'00000000'00000000'00000000'00000000'01110000'01010000,
    0b00000000'00000000'00000000'00000000'00000000'00000000'01100000'00100000,
    0b00000000'00000000'00000000'00000000'00000000'00000000'00000000'00000000,

    0b00000000'00000000'00000000'00000000'00000000'00000011'00000010'00000011,
    0b00000000'00000000'00000000'00000000'00000000'00000111'00000101'00000111,
    0b00000000'00000000'00000000'00000000'00000000'00001110'00001010'00001110,
    0b00000000'00000000'00000000'00000000'00000000'00011100'00010100'00011100,
    0b00000000'00000000'00000000'00000000'00000000'00111000'00101000'00111000,
    0b00000000'00000000'00000000'00000000'00000000'01110000'01010000'01110000,
    0b00000000'00000000'00000000'00000000'00000000'01100000'00100000'01100000,
    0b00000000'00000000'00000000'00000000'00000000'00000000'00000000'00000000,

    0b00000000'00000000'00000000'00000000'00000011'00000010'00000011'00000000,
    0b00000000'00000000'00000000'00000000'00000111'00000101'00000111'00000000,
    0b00000000'00000000'00000000'00000000'00001110'00001010'00001110'00000000,
    0b00000000'00000000'00000000'00000000'00011100'00010100'00011100'00000000,
    0b00000000'00000000'00000000'00000000'00111000'00101000'00111000'00000000,
    0b00000000'00000000'00000000'00000000'01110000'01010000'01110000'00000000,
    0b00000000'00000000'00000000'00000000'01100000'00100000'01100000'00000000,
    0b00000000'00000000'00000000'00000000'00000000'00000000'00000000'00000000,

    0b00000000'00000000'00000000'00000011'00000010'00000011'00000000'00000000,
    0b00000000'00000000'00000000'00000111'00000101'00000111'00000000'00000000,
    0b00000000'00000000'00000000'00001110'00001010'00001110'00000000'00000000,
    0b00000000'00000000'00000000'00011100'00010100'00011100'00000000'00000000,
    0b00000000'00000000'00000000'00111000'00101000'00111000'00000000'00000000,
    0b00000000'00000000'00000000'01110000'01010000'01110000'00000000'00000000,
    0b00000000'00000000'00000000'01100000'00100000'01100000'00000000'00000000,
    0b00000000'00000000'00000000'00000000'00000000'00000000'00000000'00000000,

    0b00000000'00000000'00000011'00000010'00000011'00000000'00000000'00000000,
    0b00000000'00000000'00000111'00000101'00000111'00000000'00000000'00000000,
    0b00000000'00000000'00001110'00001010'00001110'00000000'00000000'00000000,
    0b00000000'00000000'00011100'00010100'00011100'00000000'00000000'00000000,
    0b00000000'00000000'00111000'00101000'00111000'00000000'00000000'00000000,
    0b00000000'00000000'01110000'01010000'01110000'00000000'00000000'00000000,
    0b00000000'00000000'01100000'00100000'01100000'00000000'00000000'00000000,
    0b00000000'00000000'00000000'00000000'00000000'00000000'00000000'00000000,

    0b00000000'00000011'00000010'00000011'00000000'00000000'00000000'00000000,
    0b00000000'00000111'00000101'00000111'00000000'00000000'00000000'00000000,
    0b00000000'00001110'00001010'00001110'00000000'00000000'00000000'00000000,
    0b00000000'00011100'00010100'00011100'00000000'00000000'00000000'00000000,
    0b00000000'00111000'00101000'00111000'00000000'00000000'00000000'00000000,
    0b00000000'01110000'01010000'01110000'00000000'00000000'00000000'00000000,
    0b00000000'01100000'00100000'01100000'00000000'00000000'00000000'00000000,
    0b00000000'00000000'00000000'00000000'00000000'00000000'00000000'00000000,

    0b00000000'00000010'00000011'00000000'00000000'00000000'00000000'00000000,
    0b00000000'00000101'00000111'00000000'00000000'00000000'00000000'00000000,
    0b00000000'00001010'00001110'00000000'00000000'00000000'00000000'00000000,
    0b00000000'00010100'00011100'00000000'00000000'00000000'00000000'00000000,
    0b00000000'00101000'00111000'00000000'00000000'00000000'00000000'00000000,
    0b00000000'01010000'01110000'00000000'00000000'00000000'00000000'00000000,
    0b00000000'00100000'01100000'00000000'00000000'00000000'00000000'00000000,
    0b00000000'00000000'00000000'00000000'00000000'00000000'00000000'00000000,

    0b00000000'00000000'00000000'00000000'00000000'00000000'00000000'00000000,
    0b00000000'00000000'00000000'00000000'00000000'00000000'00000000'00000000,
    0b00000000'00000000'00000000'00000000'00000000'00000000'00000000'00000000,
    0b00000000'00000000'00000000'00000000'00000000'00000000'00000000'00000000,
    0b00000000'00000000'00000000'00000000'00000000'00000000'00000000'00000000,
    0b00000000'00000000'00000000'00000000'00000000'00000000'00000000'00000000,
    0b00000000'00000000'00000000'00000000'00000000'00000000'00000000'00000000,
    0b00000000'00000000'00000000'00000000'00000000'00000000'00000000'00000000};
constexpr unsigned long long IN_RADIUS_2[64]{
    0b00000000'00000000'00000000'00000000'00000000'00000111'00000100'00000100,
    0b00000000'00000000'00000000'00000000'00000000'00001111'00001000'00001000,
    0b00000000'00000000'00000000'00000000'00000000'00011111'00010001'00010001,
    0b00000000'00000000'00000000'00000000'00000000'00111110'00100010'00100010,
    0b00000000'00000000'00000000'00000000'00000000'01111100'01000100'01000100,
    0b00000000'00000000'00000000'00000000'00000000'01111000'00001000'00001000,
    0b00000000'00000000'00000000'00000000'00000000'01110000'00010000'00010000,
    0b00000000'00000000'00000000'00000000'00000000'00000000'00000000'00000000,

    0b00000000'00000000'00000000'00000000'00000111'00000100'00000100'00000100,
    0b00000000'00000000'00000000'00000000'00001111'00001000'00001000'00001000,
    0b00000000'00000000'00000000'00000000'00011111'00010001'00010001'00010001,
    0b00000000'00000000'00000000'00000000'00111110'00100010'00100010'00100010,
    0b00000000'00000000'00000000'00000000'01111100'01000100'01000100'01000100,
    0b00000000'00000000'00000000'00000000'01111000'00001000'00001000'00001000,
    0b00000000'00000000'00000000'00000000'01110000'00010000'00010000'00010000,
    0b00000000'00000000'00000000'00000000'00000000'00000000'00000000'00000000,

    0b00000000'00000000'00000000'00000111'00000100'00000100'00000100'00000111,
    0b00000000'00000000'00000000'00001111'00001000'00001000'00001000'00001111,
    0b00000000'00000000'00000000'00011111'00010001'00010001'00010001'00011111,
    0b00000000'00000000'00000000'00111110'00100010'00100010'00100010'00111110,
    0b00000000'00000000'00000000'01111100'01000100'01000100'01000100'01111100,
    0b00000000'00000000'00000000'01111000'00001000'00001000'00001000'01111000,
    0b00000000'00000000'00000000'01110000'00010000'00010000'00010000'01110000,
    0b00000000'00000000'00000000'00000000'00000000'00000000'00000000'00000000,

    0b00000000'00000000'00000111'00000100'00000100'00000100'00000111'00000000,
    0b00000000'00000000'00001111'00001000'00001000'00001000'00001111'00000000,
    0b00000000'00000000'00011111'00010001'00010001'00010001'00011111'00000000,
    0b00000000'00000000'00111110'00100010'00100010'00100010'00111110'00000000,
    0b00000000'00000000'01111100'01000100'01000100'01000100'01111100'00000000,
    0b00000000'00000000'01111000'00001000'00001000'00001000'01111000'00000000,
    0b00000000'00000000'01110000'00010000'00010000'00010000'01110000'00000000,
    0b00000000'00000000'00000000'00000000'00000000'00000000'00000000'00000000,

    0b00000000'00000111'00000100'00000100'00000100'00000111'00000000'00000000,
    0b00000000'00001111'00001000'00001000'00001000'00001111'00000000'00000000,
    0b00000000'00011111'00010001'00010001'00010001'00011111'00000000'00000000,
    0b00000000'00111110'00100010'00100010'00100010'00111110'00000000'00000000,
    0b00000000'01111100'01000100'01000100'01000100'01111100'00000000'00000000,
    0b00000000'01111000'00001000'00001000'00001000'01111000'00000000'00000000,
    0b00000000'01110000'00010000'00010000'00010000'01110000'00000000'00000000,
    0b00000000'00000000'00000000'00000000'00000000'00000000'00000000'00000000,

    0b00000000'00000100'00000100'00000100'00000111'00000000'00000000'00000000,
    0b00000000'00001000'00001000'00001000'00001111'00000000'00000000'00000000,
    0b00000000'00010001'00010001'00010001'00011111'00000000'00000000'00000000,
    0b00000000'00100010'00100010'00100010'00111110'00000000'00000000'00000000,
    0b00000000'01000100'01000100'01000100'01111100'00000000'00000000'00000000,
    0b00000000'00001000'00001000'00001000'01111000'00000000'00000000'00000000,
    0b00000000'00010000'00010000'00010000'01110000'00000000'00000000'00000000,
    0b00000000'00000000'00000000'00000000'00000000'00000000'00000000'00000000,

    0b00000000'00000100'00000100'00000111'00000000'00000000'00000000'00000000,
    0b00000000'00001000'00001000'00001111'00000000'00000000'00000000'00000000,
    0b00000000'00010001'00010001'00011111'00000000'00000000'00000000'00000000,
    0b00000000'00100010'00100010'00111110'00000000'00000000'00000000'00000000,
    0b00000000'01000100'01000100'01111100'00000000'00000000'00000000'00000000,
    0b00000000'00001000'00001000'01111000'00000000'00000000'00000000'00000000,
    0b00000000'00010000'00010000'01110000'00000000'00000000'00000000'00000000,
    0b00000000'00000000'00000000'00000000'00000000'00000000'00000000'00000000,

    0b00000000'00000000'00000000'00000000'00000000'00000000'00000000'00000000,
    0b00000000'00000000'00000000'00000000'00000000'00000000'00000000'00000000,
    0b00000000'00000000'00000000'00000000'00000000'00000000'00000000'00000000,
    0b00000000'00000000'00000000'00000000'00000000'00000000'00000000'00000000,
    0b00000000'00000000'00000000'00000000'00000000'00000000'00000000'00000000,
    0b00000000'00000000'00000000'00000000'00000000'00000000'00000000'00000000,
    0b00000000'00000000'00000000'00000000'00000000'00000000'00000000'00000000,
    0b00000000'00000000'00000000'00000000'00000000'00000000'00000000'00000000,
};

class ChessBoard
{
public:
    void move(int start, int destination)
    {
        table[player] ^= (IN_RADIUS_2[destination] & (1ULL << start)) | (1ULL << destination);
        unsigned long long change{table[player ^ 1] & IN_RADIUS_1[destination]};
        table[player] |= change;
        table[player ^ 1] ^= change;
    }

    int evaluate()
    {
        long long black{0}, white{0};
        populationCount(table[BLACK], black);
        populationCount(table[WHITE], white);
        return white - black;
    }

    ChessBoard() : player{BLACK}, table{0b00000000'01000000'00000000'00000000'00000000'00000000'00000000'00000001,
                                        0b00000000'00000001'00000000'00000000'00000000'00000000'00000000'01000000} {}

    int player;
    unsigned long long table[2];
};

class Operation
{
public:
    Operation() : start{0}, destination{0}, value{0} {}

    Operation(int s, int des, int v) : start{s}, destination{des}, value{v} {}

    int start, destination, value;
};

void search(const ChessBoard &chessBoard, Operation &answer);

int main()
{
    ChessBoard mainChessBoard;
    Operation answer;
    int turnNumber{0};
    scanf("%d", &turnNumber);
    int x0{0}, y0{0}, x1{0}, y1{0};
    for (int i{0}; i < turnNumber - 1; ++i)
    {
        scanf("%d %d %d %d", &y0, &x0, &y1, &x1);
        if (x0 >= 0)
        {
            mainChessBoard.move(x0 << 3 | y0, x1 << 3 | y1);
            mainChessBoard.player ^= 1;
        }
        scanf("%d %d %d %d", &y0, &x0, &y1, &x1);
        mainChessBoard.move(x0 << 3 | y0, x1 << 3 | y1);
        mainChessBoard.player ^= 1;
    }
    scanf("%d %d %d %d", &y0, &x0, &y1, &x1);
    if (x0 >= 0)
    {
        mainChessBoard.move(x0 << 3 | y0, x1 << 3 | y1);
        mainChessBoard.player ^= 1;
    }
    search(mainChessBoard, answer);
    printf("%d %d %d %d",
           answer.start & 7,
           answer.start >> 3,
           answer.destination & 7,
           answer.destination >> 3);
    return 0;
}

void search(const ChessBoard &chessBoard, Operation &answer)
{
    unsigned long long empty{(chessBoard.table[BLACK] | chessBoard.table[WHITE]) ^ MASK};
    unsigned long long starts{0}, start{0}, destination{0};
    ChessBoard tempChessboard;
    Operation tempOperation;
    if (chessBoard.player == WHITE)
    {
        answer.value = -64;
        while (empty)
        {
            countTrailingZero(empty, destination);
            starts = IN_RADIUS_1[destination] & chessBoard.table[chessBoard.player];
            if (starts)
            {
                countTrailingZero(starts, start);
                tempChessboard = chessBoard;
                tempChessboard.move(start, destination);
                tempOperation = Operation(start, destination, tempChessboard.evaluate());
                if (tempOperation.value > answer.value)
                    answer = tempOperation;
            }
            starts = IN_RADIUS_2[destination] & chessBoard.table[chessBoard.player];
            while (starts)
            {
                countTrailingZero(starts, start);
                tempChessboard = chessBoard;
                tempChessboard.move(start, destination);
                tempOperation = Operation(start, destination, tempChessboard.evaluate());
                if (tempOperation.value > answer.value)
                    answer = tempOperation;
                disableBit(starts, start);
            }
            disableBit(empty, destination);
        }
    }
    else
    {
        answer.value = 64;
        while (empty)
        {
            countTrailingZero(empty, destination);
            starts = IN_RADIUS_1[destination] & chessBoard.table[chessBoard.player];
            if (starts)
            {
                countTrailingZero(starts, start);
                tempChessboard = chessBoard;
                tempChessboard.move(start, destination);
                tempOperation = Operation(start, destination, tempChessboard.evaluate());
                if (tempOperation.value < answer.value)
                    answer = tempOperation;
            }
            starts = IN_RADIUS_2[destination] & chessBoard.table[chessBoard.player];
            while (starts)
            {
                countTrailingZero(starts, start);
                tempChessboard = chessBoard;
                tempChessboard.move(start, destination);
                tempOperation = Operation(start, destination, tempChessboard.evaluate());
                if (tempOperation.value < answer.value)
                    answer = tempOperation;
                disableBit(starts, start);
            }
            disableBit(empty, destination);
        }
    }
}
